diff -ur i386.origin/adxintrin.h i386/adxintrin.h
--- i386.origin/adxintrin.h	2014-11-05 19:27:57.540158037 +0800
+++ i386/adxintrin.h	2014-11-05 19:28:57.622292217 +0800
@@ -28,6 +28,10 @@
 #ifndef _ADXINTRIN_H_INCLUDED
 #define _ADXINTRIN_H_INCLUDED
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline unsigned char
 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _addcarryx_u32 (unsigned char __CF, unsigned int __X,
@@ -46,4 +50,8 @@
 }
 #endif
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _ADXINTRIN_H_INCLUDED */
diff -ur i386.origin/ammintrin.h i386/ammintrin.h
--- i386.origin/ammintrin.h	2014-11-05 19:27:57.541158011 +0800
+++ i386/ammintrin.h	2014-11-05 19:31:22.449011071 +0800
@@ -36,6 +36,10 @@
 #define __DISABLE_SSE4A__
 #endif /* __SSE4A__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _mm_stream_sd (double * __P, __m128d __Y)
 {
@@ -85,6 +89,10 @@
 				      (unsigned int)(I), (unsigned int)(L)))
 #endif
 
+#ifdef __cplusplus
+}
+#endif
+
 #ifdef __DISABLE_SSE4A__
 #undef __DISABLE_SSE4A__
 #pragma GCC pop_options
diff -ur i386.origin/avx2intrin.h i386/avx2intrin.h
--- i386.origin/avx2intrin.h	2014-11-05 19:27:57.539158063 +0800
+++ i386/avx2intrin.h	2014-11-05 19:32:47.277605720 +0800
@@ -34,6 +34,10 @@
 #define __DISABLE_AVX2__
 #endif /* __AVX2__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* Sum absolute 8-bit integer difference of adjacent groups of 4
    byte integers in the first 2 operands.  Starting offsets within
    operands are determined by the 3rd mask operand.  */
@@ -1881,6 +1885,10 @@
 					   (int)SCALE)
 #endif  /* __OPTIMIZE__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #ifdef __DISABLE_AVX2__
 #undef __DISABLE_AVX2__
 #pragma GCC pop_options
diff -ur i386.origin/avx512cdintrin.h i386/avx512cdintrin.h
--- i386.origin/avx512cdintrin.h	2014-11-05 19:27:57.544157942 +0800
+++ i386/avx512cdintrin.h	2014-11-05 19:45:43.325200681 +0800
@@ -28,6 +28,10 @@
 #ifndef _AVX512CDINTRIN_H_INCLUDED
 #define _AVX512CDINTRIN_H_INCLUDED
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 #ifndef __AVX512CD__
 #pragma GCC push_options
 #pragma GCC target("avx512cd")
@@ -181,4 +185,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_AVX512CD__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _AVX512CDINTRIN_H_INCLUDED */
diff -ur i386.origin/avx512erintrin.h i386/avx512erintrin.h
--- i386.origin/avx512erintrin.h	2014-11-05 19:27:57.540158037 +0800
+++ i386/avx512erintrin.h	2014-11-05 19:46:35.256177505 +0800
@@ -28,6 +28,10 @@
 #ifndef _AVX512ERINTRIN_H_INCLUDED
 #define _AVX512ERINTRIN_H_INCLUDED
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 #ifndef __AVX512ER__
 #pragma GCC push_options
 #pragma GCC target("avx512er")
@@ -391,4 +395,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_AVX512ER__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _AVX512ERINTRIN_H_INCLUDED */
diff -ur i386.origin/avx512fintrin.h i386/avx512fintrin.h
--- i386.origin/avx512fintrin.h	2014-11-05 19:27:57.542157986 +0800
+++ i386/avx512fintrin.h	2014-11-05 19:47:10.788845848 +0800
@@ -28,6 +28,10 @@
 #ifndef _AVX512FINTRIN_H_INCLUDED
 #define _AVX512FINTRIN_H_INCLUDED
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 #ifndef __AVX512F__
 #pragma GCC push_options
 #pragma GCC target("avx512f")
@@ -12912,4 +12916,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_AVX512F__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _AVX512FINTRIN_H_INCLUDED */
diff -ur i386.origin/avx512pfintrin.h i386/avx512pfintrin.h
--- i386.origin/avx512pfintrin.h	2014-11-05 19:27:57.539158063 +0800
+++ i386/avx512pfintrin.h	2014-11-05 19:47:39.503385846 +0800
@@ -28,6 +28,10 @@
 #ifndef _AVX512PFINTRIN_H_INCLUDED
 #define _AVX512PFINTRIN_H_INCLUDED
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 #ifndef __AVX512PF__
 #pragma GCC push_options
 #pragma GCC target("avx512pf")
@@ -209,4 +213,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_AVX512PF__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _AVX512PFINTRIN_H_INCLUDED */
diff -ur i386.origin/avxintrin.h i386/avxintrin.h
--- i386.origin/avxintrin.h	2014-11-05 19:27:57.542157986 +0800
+++ i386/avxintrin.h	2014-11-05 19:33:45.467699770 +0800
@@ -37,6 +37,10 @@
 #define __DISABLE_AVX__
 #endif /* __AVX__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* Internal data types for implementing the intrinsics.  */
 typedef double __v4df __attribute__ ((__vector_size__ (32)));
 typedef float __v8sf __attribute__ ((__vector_size__ (32)));
@@ -1455,6 +1459,10 @@
   return (__m256i) __builtin_ia32_si256_si ((__v4si)__A);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #ifdef __DISABLE_AVX__
 #undef __DISABLE_AVX__
 #pragma GCC pop_options
diff -ur i386.origin/bmi2intrin.h i386/bmi2intrin.h
--- i386.origin/bmi2intrin.h	2014-11-05 19:27:57.538158087 +0800
+++ i386/bmi2intrin.h	2014-11-05 19:28:57.628291818 +0800
@@ -34,6 +34,10 @@
 #define __DISABLE_BMI2__
 #endif /* __BMI2__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline unsigned int
 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _bzhi_u32 (unsigned int __X, unsigned int __Y)
@@ -106,4 +110,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_BMI2__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _BMI2INTRIN_H_INCLUDED */
diff -ur i386.origin/bmiintrin.h i386/bmiintrin.h
--- i386.origin/bmiintrin.h	2014-11-05 19:27:57.542157986 +0800
+++ i386/bmiintrin.h	2014-11-05 19:28:57.628291818 +0800
@@ -34,6 +34,10 @@
 #define __DISABLE_BMI__
 #endif /* __BMI__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 __tzcnt_u16 (unsigned short __X)
 {
@@ -181,4 +185,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_BMI__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _BMIINTRIN_H_INCLUDED */
diff -ur i386.origin/cpuid.h i386/cpuid.h
--- i386.origin/cpuid.h   2021-07-12 14:22:32.050498948 +0000
+++ i386/cpuid.h        2021-07-12 14:24:55.599740567 +0000
@@ -24,6 +24,10 @@
 #ifndef _CPUID_H_INCLUDED
 #define _CPUID_H_INCLUDED
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* %eax */
 #define bit_AVXVNNI    (1 << 4)
 #define bit_AVX512BF16 (1 << 5)
@@ -337,4 +341,8 @@
                 __cpuid_info[2], __cpuid_info[3]);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _CPUID_H_INCLUDED */
diff -ur i386.origin/emmintrin.h i386/emmintrin.h
--- i386.origin/emmintrin.h	2014-11-05 19:27:57.542157986 +0800
+++ i386/emmintrin.h	2014-11-05 19:34:34.939630479 +0800
@@ -36,6 +36,10 @@
 #define __DISABLE_SSE2__
 #endif /* __SSE2__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* SSE2 */
 typedef double __v2df __attribute__ ((__vector_size__ (16)));
 typedef long long __v2di __attribute__ ((__vector_size__ (16)));
@@ -1533,6 +1537,10 @@
   return (__m128d) __A;
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #ifdef __DISABLE_SSE2__
 #undef __DISABLE_SSE2__
 #pragma GCC pop_options
diff -ur i386.origin/f16cintrin.h i386/f16cintrin.h
--- i386.origin/f16cintrin.h	2014-11-05 19:27:57.542157986 +0800
+++ i386/f16cintrin.h	2014-11-05 19:28:57.628291818 +0800
@@ -34,6 +34,10 @@
 #define __DISABLE_F16C__
 #endif /* __F16C__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline float __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _cvtsh_ss (unsigned short __S)
 {
@@ -95,4 +99,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_F16C__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _F16CINTRIN_H_INCLUDED */
diff -ur i386.origin/fma4intrin.h i386/fma4intrin.h
--- i386.origin/fma4intrin.h	2014-11-05 19:27:57.542157986 +0800
+++ i386/fma4intrin.h	2014-11-05 19:28:57.629291756 +0800
@@ -37,6 +37,10 @@
 #define __DISABLE_FMA4__
 #endif /* __FMA4__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* 128b Floating point multiply/add type instructions.  */
 extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _mm_macc_ps (__m128 __A, __m128 __B, __m128 __C)
@@ -238,4 +242,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_FMA4__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif
diff -ur i386.origin/fmaintrin.h i386/fmaintrin.h
--- i386.origin/fmaintrin.h	2014-11-05 19:27:57.539158063 +0800
+++ i386/fmaintrin.h	2014-11-05 19:28:57.629291756 +0800
@@ -34,6 +34,10 @@
 #define __DISABLE_FMA__
 #endif /* __FMA__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline __m128d
 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _mm_fmadd_pd (__m128d __A, __m128d __B, __m128d __C)
@@ -299,4 +303,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_FMA__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif
diff -ur i386.origin/fxsrintrin.h i386/fxsrintrin.h
--- i386.origin/fxsrintrin.h	2014-11-05 19:27:57.542157986 +0800
+++ i386/fxsrintrin.h	2014-11-05 19:28:57.629291756 +0800
@@ -34,6 +34,10 @@
 #define __DISABLE_FXSR__
 #endif /* __FXSR__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline void
 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _fxsave (void *__P)
@@ -70,4 +74,8 @@
 #endif /* __DISABLE_FXSR__ */
 
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _FXSRINTRIN_H_INCLUDED */
diff -ur i386.origin/gmm_malloc.h i386/gmm_malloc.h
--- i386.origin/gmm_malloc.h	2014-11-05 19:27:57.540158037 +0800
+++ i386/gmm_malloc.h	2014-11-05 19:28:57.629291756 +0800
@@ -27,6 +27,10 @@
 #include <stdlib.h>
 #include <errno.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 static __inline__ void * 
 _mm_malloc (size_t __size, size_t __align)
 {
@@ -71,4 +75,8 @@
     free (((void **) __aligned_ptr)[-1]);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _MM_MALLOC_H_INCLUDED */
diff -ur i386.origin/ia32intrin.h i386/ia32intrin.h
--- i386.origin/ia32intrin.h	2014-11-05 19:27:57.539158063 +0800
+++ i386/ia32intrin.h	2014-11-05 19:28:57.629291756 +0800
@@ -25,6 +25,10 @@
 # error "Never use <ia32intrin.h> directly; include <x86intrin.h> instead."
 #endif
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* 32bit bsf */
 extern __inline int
 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
@@ -297,3 +301,7 @@
 #define _rotwr(a,b)		__rorw((a), (b))
 #define _rotl(a,b)		__rold((a), (b))
 #define _rotr(a,b)		__rord((a), (b))
+
+#ifdef __cplusplus
+}
+#endif
diff -ur i386.origin/lwpintrin.h i386/lwpintrin.h
--- i386.origin/lwpintrin.h	2014-11-05 19:27:57.544157942 +0800
+++ i386/lwpintrin.h	2014-11-05 19:36:58.324327274 +0800
@@ -34,6 +34,10 @@
 #define __DISABLE_LWP__
 #endif /* __LWP__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 __llwpcb (void *pcbAddress)
 {
@@ -97,6 +101,10 @@
 #endif
 #endif
 
+#ifdef __cplusplus
+}
+#endif
+
 #ifdef __DISABLE_LWP__
 #undef __DISABLE_LWP__
 #pragma GCC pop_options
diff -ur i386.origin/lzcntintrin.h i386/lzcntintrin.h
--- i386.origin/lzcntintrin.h	2014-11-05 19:27:57.539158063 +0800
+++ i386/lzcntintrin.h	2014-11-05 19:28:57.630291696 +0800
@@ -35,6 +35,10 @@
 #define __DISABLE_LZCNT__
 #endif /* __LZCNT__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 __lzcnt16 (unsigned short __X)
 {
@@ -72,4 +76,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_LZCNT__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _LZCNTINTRIN_H_INCLUDED */
diff -ur i386.origin/mm3dnow.h i386/mm3dnow.h
--- i386.origin/mm3dnow.h	2014-11-05 19:27:57.538158087 +0800
+++ i386/mm3dnow.h	2014-11-05 19:37:33.480988412 +0800
@@ -36,6 +36,10 @@
 #define __DISABLE_3dNOW__
 #endif /* __3dNOW__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _m_femms (void)
 {
@@ -210,6 +214,10 @@
 
 #endif /* __3dNOW_A__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #ifdef __DISABLE_3dNOW__
 #undef __DISABLE_3dNOW__
 #pragma GCC pop_options
diff -ur i386.origin/mmintrin.h i386/mmintrin.h
--- i386.origin/mmintrin.h	2014-11-05 19:27:57.539158063 +0800
+++ i386/mmintrin.h	2014-11-05 19:38:57.185562627 +0800
@@ -33,6 +33,10 @@
 #define __DISABLE_MMX__
 #endif /* __MMX__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* The Intel API is flexible enough that we must allow aliasing with other
    vector types, and their scalar components.  */
 typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));
@@ -934,6 +938,11 @@
 {
   return _mm_set_pi8 (__b, __b, __b, __b, __b, __b, __b, __b);
 }
+
+#ifdef __cplusplus
+}
+#endif
+
 #ifdef __DISABLE_MMX__
 #undef __DISABLE_MMX__
 #pragma GCC pop_options
diff -ur i386.origin/pmmintrin.h i386/pmmintrin.h
--- i386.origin/pmmintrin.h	2014-11-05 19:27:57.538158087 +0800
+++ i386/pmmintrin.h	2014-11-05 19:39:36.000292608 +0800
@@ -36,6 +36,10 @@
 #define __DISABLE_SSE3__
 #endif /* __SSE3__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* Additional bits in the MXCSR.  */
 #define _MM_DENORMALS_ZERO_MASK		0x0040
 #define _MM_DENORMALS_ZERO_ON		0x0040
@@ -124,6 +128,10 @@
   __builtin_ia32_mwait (__E, __H);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #ifdef __DISABLE_SSE3__
 #undef __DISABLE_SSE3__
 #pragma GCC pop_options
diff -ur i386.origin/pmm_malloc.h i386/pmm_malloc.h
--- i386.origin/pmm_malloc.h	2014-11-05 19:27:57.539158063 +0800
+++ i386/pmm_malloc.h	2014-11-05 19:28:57.631291637 +0800
@@ -34,6 +34,10 @@
 extern "C" int posix_memalign (void **, size_t, size_t) throw ();
 #endif
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 static __inline void *
 _mm_malloc (size_t size, size_t alignment)
 {
@@ -54,4 +58,8 @@
   free (ptr);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _MM_MALLOC_H_INCLUDED */
diff -ur i386.origin/popcntintrin.h i386/popcntintrin.h
--- i386.origin/popcntintrin.h	2014-11-05 19:27:57.542157986 +0800
+++ i386/popcntintrin.h	2014-11-05 19:28:57.631291637 +0800
@@ -30,6 +30,10 @@
 #define __DISABLE_POPCNT__
 #endif /* __POPCNT__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* Calculate a number of bits set to 1.  */
 extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _mm_popcnt_u32 (unsigned int __X)
@@ -50,4 +54,8 @@
 #pragma GCC pop_options
 #endif  /* __DISABLE_POPCNT__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _POPCNTINTRIN_H_INCLUDED */
diff -ur i386.origin/prfchwintrin.h i386/prfchwintrin.h
--- i386.origin/prfchwintrin.h	2014-11-05 19:27:57.541158011 +0800
+++ i386/prfchwintrin.h	2014-11-05 19:28:57.631291637 +0800
@@ -28,10 +28,18 @@
 #ifndef _PRFCHWINTRIN_H_INCLUDED
 #define _PRFCHWINTRIN_H_INCLUDED
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _m_prefetchw (void *__P)
 {
   __builtin_prefetch (__P, 1, 3 /* _MM_HINT_T0 */);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _PRFCHWINTRIN_H_INCLUDED */
diff -ur i386.origin/rdseedintrin.h i386/rdseedintrin.h
--- i386.origin/rdseedintrin.h	2014-11-05 19:27:57.539158063 +0800
+++ i386/rdseedintrin.h	2014-11-05 19:28:57.631291637 +0800
@@ -35,6 +35,10 @@
 #endif /* __RDSEED__ */
 
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline int
 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _rdseed16_step (unsigned short *p)
@@ -63,4 +67,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_RDSEED__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _RDSEEDINTRIN_H_INCLUDED */
diff -ur i386.origin/rtmintrin.h i386/rtmintrin.h
--- i386.origin/rtmintrin.h	2014-11-05 19:27:57.539158063 +0800
+++ i386/rtmintrin.h	2014-11-05 19:28:57.631291637 +0800
@@ -34,6 +34,10 @@
 #define __DISABLE_RTM__
 #endif /* __RTM__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 #define _XBEGIN_STARTED		(~0u)
 #define _XABORT_EXPLICIT	(1 << 0)
 #define _XABORT_RETRY		(1 << 1)
@@ -81,4 +85,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_RTM__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _RTMINTRIN_H_INCLUDED */
diff -ur i386.origin/smmintrin.h i386/smmintrin.h
--- i386.origin/smmintrin.h	2014-11-05 19:27:57.543157964 +0800
+++ i386/smmintrin.h	2014-11-05 19:41:07.230008276 +0800
@@ -31,6 +31,10 @@
    files.  */
 #include <tmmintrin.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 #ifndef __SSE4_1__
 #pragma GCC push_options
 #pragma GCC target("sse4.1")
@@ -859,4 +863,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_SSE4_1__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _SMMINTRIN_H_INCLUDED */
diff -ur i386.origin/tbmintrin.h i386/tbmintrin.h
--- i386.origin/tbmintrin.h	2014-11-05 19:27:57.544157942 +0800
+++ i386/tbmintrin.h	2014-11-05 19:42:06.285118930 +0800
@@ -34,6 +34,10 @@
 #define __DISABLE_TBM__
 #endif /* __TBM__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 #ifdef __OPTIMIZE__
 extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 __bextri_u32 (unsigned int __X, const unsigned int __I)
@@ -172,6 +176,10 @@
 
 #endif /* __x86_64__  */
 
+#ifdef __cplusplus
+}
+#endif
+
 #ifdef __DISABLE_TBM__
 #undef __DISABLE_TBM__
 #pragma GCC pop_options
diff -ur i386.origin/tmmintrin.h i386/tmmintrin.h
--- i386.origin/tmmintrin.h	2014-11-05 19:27:57.540158037 +0800
+++ i386/tmmintrin.h	2014-11-05 19:42:38.133718004 +0800
@@ -36,6 +36,10 @@
 #define __DISABLE_SSSE3__
 #endif /* __SSSE3__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _mm_hadd_epi16 (__m128i __X, __m128i __Y)
 {
@@ -241,6 +245,10 @@
   return (__m64) __builtin_ia32_pabsd ((__v2si)__X);
 }
 
+#ifdef __cplusplus
+}
+#endif
+
 #ifdef __DISABLE_SSSE3__
 #undef __DISABLE_SSSE3__
 #pragma GCC pop_options
diff -ur i386.origin/wmmintrin.h i386/wmmintrin.h
--- i386.origin/wmmintrin.h	2014-11-05 19:27:57.541158011 +0800
+++ i386/wmmintrin.h	2014-11-05 19:43:13.990392056 +0800
@@ -30,6 +30,10 @@
 /* We need definitions from the SSE2 header file.  */
 #include <emmintrin.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* AES */
 
 #ifndef __AES__
@@ -129,4 +133,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_PCLMUL__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _WMMINTRIN_H_INCLUDED */
diff -ur i386.origin/xmmintrin.h i386/xmmintrin.h
--- i386.origin/xmmintrin.h	2014-11-05 19:27:57.539158063 +0800
+++ i386/xmmintrin.h	2014-11-05 19:28:57.633291523 +0800
@@ -64,6 +64,10 @@
 #define __DISABLE_SSE__
 #endif /* __SSE__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* The Intel API is flexible enough that we must allow aliasing with other
    vector types, and their scalar components.  */
 typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));
@@ -1254,6 +1258,10 @@
   (row3) = __builtin_ia32_movhlps (__t3, __t2);				\
 } while (0)
 
+#ifdef __cplusplus
+}
+#endif
+
 /* For backward source compatibility.  */
 # include <emmintrin.h>
 
diff -ur i386.origin/xopintrin.h i386/xopintrin.h
--- i386.origin/xopintrin.h	2014-11-05 19:27:57.539158063 +0800
+++ i386/xopintrin.h	2014-11-05 19:44:05.712364795 +0800
@@ -36,6 +36,10 @@
 #define __DISABLE_XOP__
 #endif /* __XOP__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* Integer multiply/add instructions. */
 extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _mm_maccs_epi16(__m128i __A, __m128i __B, __m128i __C)
@@ -836,6 +840,10 @@
  					  (int)(I)))
 #endif /* __OPTIMIZE__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #ifdef __DISABLE_XOP__
 #undef __DISABLE_XOP__
 #pragma GCC pop_options
diff -ur i386.origin/xsaveintrin.h i386/xsaveintrin.h
--- i386.origin/xsaveintrin.h	2014-11-05 19:27:57.540158037 +0800
+++ i386/xsaveintrin.h	2014-11-05 19:28:57.633291523 +0800
@@ -34,6 +34,10 @@
 #define __DISABLE_XSAVE__
 #endif /* __XSAVE__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline void
 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _xsave (void *__P, long long __M)
@@ -69,4 +73,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_XSAVE__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _XSAVEINTRIN_H_INCLUDED */
diff -ur i386.origin/xsaveoptintrin.h i386/xsaveoptintrin.h
--- i386.origin/xsaveoptintrin.h	2014-11-05 19:27:57.544157942 +0800
+++ i386/xsaveoptintrin.h	2014-11-05 19:28:57.633291523 +0800
@@ -34,6 +34,10 @@
 #define __DISABLE_XSAVEOPT__
 #endif /* __XSAVEOPT__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 extern __inline void
 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 _xsaveopt (void *__P, long long __M)
@@ -55,4 +59,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_XSAVEOPT__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _XSAVEOPTINTRIN_H_INCLUDED */
diff -ur i386.origin/xtestintrin.h i386/xtestintrin.h
--- i386.origin/xtestintrin.h	2014-11-05 19:27:57.540158037 +0800
+++ i386/xtestintrin.h	2014-11-05 19:28:57.634291468 +0800
@@ -34,6 +34,10 @@
 #define __DISABLE_RTM__
 #endif /* __RTM__ */
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /* Return non-zero if the instruction executes inside an RTM or HLE code
    region.  Return zero otherwise.   */
 extern __inline int
@@ -48,4 +52,8 @@
 #pragma GCC pop_options
 #endif /* __DISABLE_RTM__ */
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* _XTESTINTRIN_H_INCLUDED */

#!/bin/bash

CLANG_COMPILER="@clang_compiler@"
DRIVER_MODE="@driver_mode@"
LINKER="@linker@"
TARGET_CPU="@target_cpu@"
TARGET_ARCH="@target_arch@"
GCC_ARCH="@gcc_arch@"
CLANG_CFI="@clang_cfi@"
OPT="@opt@"

DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && cd .. && pwd)
PROG=$DIR/bin/$CLANG_COMPILER
FLAGS="$FLAGS -target ${TARGET_CPU}-pc-windows-gnu"
FLAGS="$FLAGS$DRIVER_MODE --sysroot $DIR/${TARGET_ARCH}"
FLAGS="$FLAGS -fuse-ld=lld --ld-path=${TARGET_ARCH}-ld"
FLAGS="$FLAGS -Wno-unused-command-line-argument -Wno-int-conversion -Wno-unused-function"

if [ "${TARGET_CPU}" == "aarch64" ]; then
    ARCH_FLAGS="-mcpu=${GCC_ARCH} -mtune=generic"
else
    ARCH_FLAGS="-march=${GCC_ARCH} -mtune=generic"
fi

if [ "$NO_CONFLTO" == "1" ]; then
    SKIP_OPT="-g0 -O0 -fno-lto -fno-data-sections -fno-function-sections"
else
    FLAGS="$FLAGS -gcodeview${CLANG_CFI}${OPT}"
    if [ "$ENABLE_CCACHE" == "ON" ]; then
        CCACHE="ccache"
    fi
    if [ "$GC" != "0" ]; then
        CLANG_GC="-fdata-sections -ffunction-sections"
    fi
    CPU_COUNT=$(grep -c processor /proc/cpuinfo)
    if [ "$LTO" != "0" ] && [ "$CLANG_PACKAGES_LTO" == "ON" ]; then
        LTO_FLAGS="-flto=thin"
        if [ "$LLD_LTO_ALL_THREADS" == "1" ] && [ "$LTO_JOB" != "1" ]; then
            LTO_FLAGS="$LTO_FLAGS -flto-jobs=$CPU_COUNT"
        fi
    fi
    if [ "$LLVM_ENABLE_PGO" == "GEN" ] || [ "$LLVM_ENABLE_PGO" == "CSGEN" ]; then
        export LLVM_PROFILE_FILE="$LLVM_PROFILE_DATA_DIR/clang-%m.profraw" #enable profraw output only when NO_CONFLTO!=1
    fi    
fi

$CCACHE "$PROG" $LTO_FLAGS $ARCH_FLAGS "$@" $FLAGS $CLANG_GC $CLANG_FLAGS$LINKER $SKIP_OPT
name: Autoupdate ver.sh
on: 
  workflow_dispatch:
  #schedule:
  #- cron: '30 0 * * MON'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0
        token: ${{ secrets.BOT }}
    - name: Install git
      run: |
        sudo apt-get update
        sudo apt-get -y install git
    - name: Set env
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
    - name: Update
      shell: bash
      run: |
        rm ver.sh || true
        declare -A ver_array #声明关联数组
        ver_json=$(curl -s "https://raw.githubusercontent.com/eko5624/nginx-nosni/master/old.json")
        
        #第一种方案
        #while IFS="=" read -r k v; do
        #  ver_array[$k]=$v
        #done < <(echo "$ver_json" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"')

        #第二种方案
        while IFS= read -r line; do  #从标准输入逐行读取内容，并存储到变量"line"中。"IFS"设置空值防止前导和尾随的空白被修剪掉。"-r"禁用反斜杠转义。
          k=$(echo "$line" | jq -r '"\(.key)"')  #提取每行key对应的值。"-r"表示原始字符串格式输出，而不出json指定格式输出
          v=$(echo "$line" | jq -r '"\(.value)"')  #提取每行value对应的值。此处"-r"的作用相当于去除值的引号。
          ver_array[$k]=$v  #把提取到的键值对存储到关联数组"ver_array"中
        done < <(echo "$ver_json" | jq -c 'to_entries | .[]')  # "to_entries"将对象转换键值对数组，-c表示输出一行，而不是格式化的多行"
        
        echo "VER_LLVM=$(echo "${ver_array[data]}" | jq -r '.LLVM.version')" >> ver.sh
        echo "VER_BINUTILS=$(echo "${ver_array[data]}" | jq -r '.binutils.version')" >> ver.sh
        echo "VER_GCC=$(echo "${ver_array[data]}" | jq -r '.GCC.version')" >> ver.sh
        echo "VER_GMP=$(echo "${ver_array[data]}" | jq -r '.gmp.version')" >> ver.sh
        echo "VER_MPFR=$(echo "${ver_array[data]}" | jq -r '.mpfr.version')" >> ver.sh
        echo "VER_MPC=$(echo "${ver_array[data]}" | jq -r '.mpc.version')" >> ver.sh
        echo "VER_ISL=$(echo "${ver_array[data]}" | jq -r '.isl.version')" >> ver.sh
        echo "VER_MAKE=$(echo "${ver_array[data]}" | jq -r '.make.version')" >> ver.sh
        echo "VER_CMAKE=$(echo "${ver_array[data]}" | jq -r '.cmake.version')" >> ver.sh
        echo "VER_NINJA=$(echo "${ver_array[data]}" | jq -r '.ninja.version')" >> ver.sh
        echo "VER_NASM=$(echo "${ver_array[data]}" | jq -r '.nasm.version')" >> ver.sh
        echo "VER_YASM=$(echo "${ver_array[data]}" | jq -r '.yasm.version')" >> ver.sh
        echo "VER_PKGCONF=$(echo "${ver_array[data]}" | jq -r '.pkgconf.version')" >> ver.sh
    - name: release
      run: |
        git add -A
        git commit -am "Automate" || echo "nothing updated"
        git push -f 

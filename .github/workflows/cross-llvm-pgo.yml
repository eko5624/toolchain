name: cross-llvm-pgo
defaults:
  run:
    shell: bash
on:
  workflow_dispatch:
    inputs:
      llvm_thin_lto:
        description: "Build llvm with thin-lto"
        required: false
        default: "false"
        type: boolean
      llvm_full_lto:
        description: "Build llvm with full-lto"
        required: false
        default: "false"
        type: boolean
      llvm_ccache:
        description: "Build llvm with ccache"
        required: false
        default: "false"
        type: boolean
      package_lto:
        description: "Build packages with thin-lto"
        required: false
        default: "false"
        type: boolean        
      package_ccache:
        description: "Build packages with cache"
        required: false
        default: "false"
        type: boolean
  
jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: docker://ghcr.io/eko5624/archlinux:latest
    steps:
      - name: Init variable
        run: |
          if [ ${{ inputs.llvm_thin_lto }} == 'true' ]; then
            echo "LLVM_LTO=--enable-llvm-thin_lto" >> $GITHUB_ENV
          elif [ ${{ inputs.llvm_full_lto }} == 'true' ]; then
            echo "LLVM_LTO=--enable-llvm-full_lto" >> $GITHUB_ENV
          else
            unset LLVM_LTO
          fi  
          if [ ${{ inputs.llvm_ccache }} == 'true' ]; then
            echo "LLVM_CCACHE=--enable-llvm-ccache" >> $GITHUB_ENV
          else
            unset LLVM_CCACHE
          fi
          if [ ${{ inputs.package_lto }} == 'true' ]; then
            echo "PACKAGE_LTO=--enable-package-lto" >> $GITHUB_ENV
          else
            unset PACKAGE_LTO
          fi           
          if [ ${{ inputs.package_ccache }} == 'true' ]; then
            echo "PACKAGE_CCACHE=--enable-package-ccache" >> $GITHUB_ENV
          else
            unset PACKAGE_CCACHE
          fi 

      - name: Checkout
        uses: actions/checkout@main
        
      - name: Load llvm-pgo cache
        uses: actions/cache/restore@main
        id: llvm-pgo
        with:
          path: ${{ github.workspace }}/llvm_root
          key: llvm-pgo-${{ github.run_id }}
          restore-keys: |
            llvm-pgo-
      
      - name: Load llvm-project source
        uses: actions/cache@main
        id: llvm-source
        with:
          path: ${{ github.workspace }}/source/llvm-project
          key: llvm-source-cache
          
      - name: Install fuchsia-clang
        if: ${{ steps.llvm-pgo.outputs.cache-matched-key == '' }}
        run: |
          sudo GOBIN=/usr/bin go install go.chromium.org/luci/cipd/client/cmd/...@latest
          sudo cipd install fuchsia/third_party/clang/linux-amd64 latest -root /usr/local/fuchsia-clang
      
      - name: Setup llvm-pgo-latest
        if: (steps.llvm-pgo.outputs.cache-matched-key == '' && inputs.llvm_thin_lto) || (steps.llvm-pgo.outputs.cache-matched-key == '' && inputs.llvm_full_lto) || (steps.llvm-pgo.outputs.cache-matched-key == '' && inputs.llvm_ccache) || (steps.llvm-pgo.outputs.cache-matched-key == '' && inputs.package_lto) || (steps.llvm-pgo.outputs.cache-matched-key == '' && inputs.package_ccache)
        run: |
          curl -OL https://github.com/${{ github.repository }}/releases/download/toolchain/llvm-pgo-latest.7z || true
          7z x llvm-pgo-latest.7z || true 
          rm llvm-pgo-latest.7z || true
          rm -rf llvm_root/bin || true
          rm -rf llvm_root/lib || true
          
      - name: Setup llvm-clang toolchain with IR Profile Instrumentation
        if: ${{ steps.llvm-pgo.outputs.cache-matched-key == '' }}
        run: |
          curl -OL https://github.com/${{ github.repository }}/releases/download/toolchain/llvm-clang-ir-latest-ucrt-x86_64.7z
          7z x llvm-clang-ir-latest-ucrt-x86_64.7z
          rm llvm-clang-ir-latest-ucrt-x86_64.7z

      - name: Train pgo with shaderc
        if: ${{ steps.llvm-pgo.outputs.cache-matched-key == '' }}
        run: |
          chmod +x ./train-pgo.sh
          ./train-pgo.sh --enable-pgo_gen $PACKAGE_LTO $PACKAGE_CCACHE

      - name: Build llvm with pgo
        if: ${{ steps.llvm-pgo.outputs.cache-matched-key == '' }}
        run: |
          chmod +x ./llvm.sh
          ./llvm.sh --enable-pgo_use $LLVM_LTO $LLVM_CCACHE

      - name: Save llvm-pgo cache
        if: ${{ steps.llvm-pgo.outputs.cache-matched-key == '' }}
        uses: actions/cache/save@main
        with:
          path: ${{ github.workspace }}/llvm_root
          key: llvm-pgo-${{ github.run_id }}

      - name: Get current timestamp
        run: echo "date=$(date +%Y%m%d)" >> $GITHUB_ENV

      - name: Package llvm-pgo-latest
        run: 7z a llvm-pgo-latest.7z llvm_root/*
      - name: Delete
        env:
          GH_TOKEN: ${{ github.token }} 
        run: |
          chmod +x ./package-delete.sh
          ./package-delete.sh llvm-pgo-latest.7z
      - name: Release
        if: ${{ steps.llvm-pgo.outputs.cache-matched-key == '' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          chmod +x ./package-release.sh
          ./package-release.sh

      - name: Remove cross lto ccache dirs
        run: |
          rm -rf cross || true
          rm -rf llvm_root/llvm-lto || true
          rm -rf llvm_root/llvm-ccache || true
          rm -rf llvm_root/package-lto || true
          rm -rf llvm_root/package-ccache || true

      - name: Package x86_64 toolchain
        run: |
          curl -OL https://github.com/${{ github.repository }}/releases/download/toolchain/llvm-clang-ir-latest-ucrt-x86_64.7z
          7z x llvm-clang-ir-latest-ucrt-x86_64.7z
          rm llvm-clang-ir-latest-ucrt-x86_64.7z
          rm -rf cross/profiles
          cp -rf llvm_root/* cross
          7z a llvm-clang-pgo-${{ env.date }}-ucrt-x86_64.7z cross/*
          cp llvm-clang-pgo-${{ env.date }}-ucrt-x86_64.7z llvm-clang-pgo-latest-ucrt-x86_64.7z
          rm -rf cross
      - name: Delete
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          chmod +x ./package-delete.sh
          ./package-delete.sh llvm-clang-pgo-latest-ucrt-x86_64.7z

      - name: Packaging x86_64_v3 toolchain
        run: |
          curl -OL https://github.com/${{ github.repository }}/releases/download/toolchain/llvm-clang-ir-latest-ucrt-x86_64_v3.7z
          7z x llvm-clang-ir-latest-ucrt-x86_64_v3.7z
          rm llvm-clang-ir-latest-ucrt-x86_64_v3.7z
          rm -rf cross/profiles
          cp -rf llvm_root/* cross
          7z a llvm-clang-pgo-${{ env.date }}-ucrt-x86_64_v3.7z cross/*
          cp llvm-clang-pgo-${{ env.date }}-ucrt-x86_64_v3.7z llvm-clang-pgo-latest-ucrt-x86_64_v3.7z
          rm -rf cross
      - name: Delete
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }} 
        run: |
          chmod +x ./package-delete.sh
          ./package-delete.sh llvm-clang-pgo-latest-ucrt-x86_64_v3.7z
      - name: Release
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }} 
        run: |
          chmod +x ./package-release.sh
          ./package-release.sh
      - name: Remove all *.7z packages
        continue-on-error: true
        run: rm *.7z

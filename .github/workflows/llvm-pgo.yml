name: llvm-pgo
defaults:
  run:
    shell: bash
on:
  workflow_dispatch:
    inputs:
      pgo:
        description: "Build llvm with PGO"
        required: false
        default: "false"
        type: boolean
      llvm_thin_lto:
        description: "Build llvm with thin-lto"
        required: false
        default: "false"
        type: boolean
      llvm_ccache:
        description: "Build llvm with ccache"
        required: false
        default: "false"
        type: boolean
  
jobs:
  train_pgo:
    runs-on: ubuntu-latest
    container:
      image: docker://ghcr.io/eko5624/archlinux:latest
    steps:
      - name: Init variable
        run: |
          if [ ${{ inputs.llvm_thin_lto }} == 'true' ]; then
            echo "LLVM_LTO=--enable-llvm-thin_lto" >> $GITHUB_ENV
          else
            unset LLVM_LTO
          fi  
          if [ ${{ inputs.llvm_ccache }} == 'true' ]; then
            echo "LLVM_CCACHE=--enable-llvm-ccache" >> $GITHUB_ENV
          else
            unset LLVM_CCACHE
          fi
      - name: Checkout
        uses: actions/checkout@main
      - name: Load llvm.profdata cache
        uses: actions/cache/restore@main
        id: llvm-profdata
        with:
          path: ${{ github.workspace }}/llvm.profdata
          key: llvm-profdata-${{ github.run_id }}
          restore-keys: |
            llvm-profdata-
      #- name: Install fuchsia-clang
      #  if: ${{ steps.llvm-cache.outputs.cache-matched-key == '' }}
      #  run: |
      #    sudo GOBIN=/usr/bin go install go.chromium.org/luci/cipd/client/cmd/...@latest
      #    sudo cipd install fuchsia/third_party/clang/linux-amd64 latest -root /usr/local/fuchsia-clang
      - name: Install host clang toolchain
        if: ${{ steps.llvm-profdata.outputs.cache-matched-key == '' }}
        run: |
          curl -OL https://github.com/${{ github.repository }}/releases/download/toolchain/cross-llvm-clang-pgo-latest-ucrt-x86_64.tar.xz
          tar -Jxf cross-llvm-clang-pgo-latest-ucrt-x86_64.tar.xz
          rm cross-llvm-clang-pgo-latest-ucrt-x86_64.tar.xz
          mv cross host
      - name: Setup llvm-ir
        if: ${{ steps.llvm-profdata.outputs.cache-matched-key == '' }}
        run: |
          curl -OL https://github.com/eko5624/toolchain/releases/download/toolchain/llvm-ir-latest.tar.xz
          tar -Jxf llvm-ir-latest.tar.xz
          rm llvm*.tar.xz
          rm -rf cross/llvm-lto || true
          rm -rf cross/llvm-ccache || true
      - name: Load llvm-project source
        uses: actions/cache@main
        id: llvm-source
        with:
          path: ${{ github.workspace }}/source/llvm-project
          key: llvm-source-cache
      - name: Build llvm-clang-ir
        if: ${{ steps.llvm-profdata.outputs.cache-matched-key == '' }}
        run: |
          set -x
          chmod +x ./llvm-static-wrappers.sh
          ./llvm-static-wrappers.sh --x86_64
          chmod +x ./cross-llvm-clang.sh
          ./cross-llvm-clang.sh --enable-pgo_gen --x86_64
      - name: Train pgo with shaderc
        if: ${{ steps.llvm-profdata.outputs.cache-matched-key == '' }}
        run: |
          chmod +x ./train-pgo.sh
          ./train-pgo.sh --enable-pgo_gen
      - name: Save llvm.profdata cache
        if: ${{ steps.llvm-profdata.outputs.cache-matched-key == '' }}
        uses: actions/cache/save@main
        with:
          path: ${{ github.workspace }}/llvm.profdata
          key: llvm-profdata-${{ github.run_id }}

  llvm_pgo:
    needs: train_pgo
    runs-on: ubuntu-latest
    container:
      image: docker://ghcr.io/eko5624/archlinux:latest
    steps:
      - name: Init variable
        run: |
          if [ ${{ inputs.llvm_thin_lto }} == 'true' ]; then
            echo "LLVM_LTO=--enable-llvm-thin_lto" >> $GITHUB_ENV
          else
            unset LLVM_LTO
          fi  
          if [ ${{ inputs.llvm_ccache }} == 'true' ]; then
            echo "LLVM_CCACHE=--enable-llvm-ccache" >> $GITHUB_ENV
          else
            unset LLVM_CCACHE
          fi
      - name: Checkout
        uses: actions/checkout@main
      - name: Load cross-llvm-pgo cache
        uses: actions/cache/restore@main
        id: cross-llvm-pgo
        with:
          path: ${{ github.workspace }}/llvm_pgo
          key: cross-llvm-pgo-${{ github.run_id }}
          restore-keys: |
            cross-llvm-pgo-
      - name: Load llvm.profdata cache
        uses: actions/cache/restore@main
        id: llvm-profdata
        with:
          path: ${{ github.workspace }}/llvm.profdata
          key: llvm-profdata-${{ github.run_id }}
          restore-keys: |
            llvm-profdata-
      - name: Load llvm-project source
        uses: actions/cache@main
        id: llvm-source
        with:
          path: ${{ github.workspace }}/source/llvm-project
          key: llvm-source-cache
      #- name: Install fuchsia-clang
      #  if: ${{ steps.llvm-cache.outputs.cache-matched-key == '' }}
      #  run: |
      #    sudo GOBIN=/usr/bin go install go.chromium.org/luci/cipd/client/cmd/...@latest
      #    sudo cipd install fuchsia/third_party/clang/linux-amd64 latest -root /usr/local/fuchsia-clang
      - name: Install host clang toolchain
        if: ${{ steps.cross-llvm-pgo.outputs.cache-matched-key == '' }}
        run: |
          curl -OL https://github.com/${{ github.repository }}/releases/download/toolchain/cross-llvm-clang-pgo-latest-ucrt-x86_64.tar.xz
          tar -Jxf cross-llvm-clang-pgo-latest-ucrt-x86_64.tar.xz
          rm cross-llvm-clang-pgo-latest-ucrt-x86_64.tar.xz
          mv cross host
      - name: Install llvm-lto llvm-ccache
        if: (steps.cross-llvm-pgo.outputs.cache-matched-key == '' && inputs.llvm_thin_lto) || (steps.cross-llvm-pgo.outputs.cache-matched-key == '' && inputs.llvm_ccache)
        run: |
          curl -OL https://github.com/${{ github.repository }}/releases/download/toolchain/cross-llvm-pgo-latest.tar.xz || true
          tar -Jxf cross-llvm-pgo-latest.tar.xz || true
          rm cross-llvm-pgo-latest.tar.xz || true
          rm -rf llvm_pgo/bin || true
          rm -rf llvm_pgo/lib || true
      - name: Build llvm with pgo
        if: ${{ steps.cross-llvm-pgo.outputs.cache-matched-key == '' }}
        run: |
          chmod +x ./llvm-static.sh
          ./llvm-static.sh --enable-bolt_use --enable-pgo_use $LLVM_LTO $LLVM_CCACHE
      - name: Save cross-llvm-pgo cache
        if: ${{ steps.cross-llvm-pgo.outputs.cache-matched-key == '' }}
        uses: actions/cache/save@main
        with:
          path: ${{ github.workspace }}/llvm_pgo
          key: cross-llvm-pgo-${{ github.run_id }}
      - name: Get current timestamp
        run: echo "date=$(date +%Y%m%d)" >> $GITHUB_ENV
      - name: Package cross-llvm-pgo
        if: ${{ steps.cross-llvm-pgo.outputs.cache-matched-key == '' }}
        run: tar -Jcf cross-llvm-pgo-latest.tar.xz llvm_pgo
      - name: Delete
        if: ${{ steps.cross-llvm-pgo.outputs.cache-matched-key == '' }}
        env:
          GH_TOKEN: ${{ github.token }} 
        run: |
          chmod +x ./package-delete.sh
          ./package-delete.sh cross-llvm-pgo-latest.tar.xz
      - name: Release
        if: ${{ steps.cross-llvm-pgo.outputs.cache-matched-key == '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: toolchain
          name: toolchain
          files: cross-llvm-pgo-latest.tar.xz

  build_toolchain_with_pgo:
    needs: llvm_pgo
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Run toolchain.yml
        run: |
          curl -u $GITHUB_ACTOR:$GH_TOKEN \
            -X POST -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/workflows/toolchain.yml/dispatches \
            -d '{"ref":"main","inputs":{"pgo":"true","llvm_thin_lto":"false","llvm_ccache":"false"}}'

            

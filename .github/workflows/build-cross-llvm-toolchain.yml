name: Build cross-llvm-toolchain
defaults:
  run:
    shell: bash
on:
  workflow_dispatch:
    inputs:
      pgo:
        description: "Build LLVM with PGO"
        required: false
        default: "false"
        type: boolean
      llvm_thin_lto:
        description: "Build LLVM with ThinLTO"
        required: false
        default: "false"
        type: boolean
      llvm_full_lto:
        description: "Build LLVM with FullLTO"
        required: false
        default: "false"
        type: boolean
      llvm_ccache:
        description: "Build LLVM with CCACHE"
        required: false
        default: "false"
        type: boolean
      package_lto:
        description: "Build packages with ThinLTO"
        required: false
        default: "false"
        type: boolean        
      package_ccache:
        description: "Build packages with CCACHE"
        required: false
        default: "false"
        type: boolean
        
  
jobs:
  build_llvm:
    runs-on: ubuntu-latest
    container:
      image: docker://ghcr.io/eko5624/archlinux:latest
    steps:
      - name: Init variable
        run: |
          if [ ${{ inputs.pgo }} == 'true' ]; then
            echo "PGO=--enable-pgo" >> $GITHUB_ENV
            echo "IR=-ir" >> $GITHUB_ENV
          else
            unset PGO IR
          fi  
          if [ ${{ inputs.llvm_thin_lto }} == 'true' ]; then
            echo "LLVM_LTO=--enable-llvm-thin_lto" >> $GITHUB_ENV
          elif [ ${{ inputs.llvm_full_lto }} == 'true' ]; then
            echo "LLVM_LTO=--enable-llvm-full_lto" >> $GITHUB_ENV  
          else
            unset LLVM_LTO
          fi  
          if [ ${{ inputs.llvm_ccache }} == 'true' ]; then
            echo "LLVM_CCACHE=--enable-llvm-ccache" >> $GITHUB_ENV
          else
            unset LLVM_CCACHE
          fi        

      - name: Install fuchsia-clang
        run: |
          sudo GOBIN=/usr/bin go install go.chromium.org/luci/cipd/client/cmd/...@latest
          sudo cipd install fuchsia/third_party/clang/linux-amd64 latest -root /usr/local/fuchsia-clang

      - name: Checkout
        uses: actions/checkout@main

      - name: Load llvm${{ env.IR }} cache
        uses: actions/cache/restore@main
        id: llvm-cache
        with:
          path: ${{ github.workspace }}/cross
          key: llvm${{ env.IR }}-cache-${{ github.run_id }}
          restore-keys: |
            llvm${{ env.IR }}-cache-

      - name: Setup llvm${{ env.IR }}
        if: ${{ steps.llvm-cache.outputs.cache-matched-key == '' && inputs.llvm_lto == 'true' }} || ${{ steps.llvm-cache.outputs.cache-matched-key == '' && inputs.llvm_ccache == 'true' }}
        run: |
            curl -OL https://github.com/${{ github.repository }}/releases/download/toolchain/llvm$IR-latest.7z || true
            7z x llvm$IR-latest.7z || true 
            rm llvm$IR-latest.7z || true
            rm -rf cross/bin || true
            rm -rf cross/lib || true
          
      - name: Build llvm${{ env.IR }}
        if: ${{ steps.llvm-cache.outputs.cache-matched-key == '' }}
        run: |
          set -x
          chmod +x ./llvm.sh
          ./llvm.sh $PGO $LLVM_LTO $LLVM_CCACHE

      - name: Save llvm${{ env.IR }} cache
        uses: actions/cache/save@main
        if: always()
        with:
          path: ${{ github.workspace }}/cross
          key: llvm${{ env.IR }}-cache-${{ github.run_id }}

      - name: Get current timestamp
        if: ${{ steps.llvm-cache.outputs.cache-matched-key == '' }}
        run: echo "date=$(date +%Y%m%d)" >> $GITHUB_ENV

      - name: Package llvm
        if: ${{ steps.llvm-cache.outputs.cache-matched-key == '' }}
        run: 7z a llvm$IR-latest.7z cross/*

      - name: Delete
        if: ${{ steps.llvm-cache.outputs.cache-matched-key == '' }}
        env:
          GH_TOKEN: ${{ github.token }} 
        run: |
          chmod +x ./package-delete.sh
          ./package-delete.sh llvm$IR-latest.7z
      - name: Release
        if: ${{ steps.llvm-cache.outputs.cache-matched-key == '' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          chmod +x ./package-release.sh
          ./package-release.sh

  build_llvm-clang-x86_64:
    needs: build_llvm
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Run cross-llvm-clang-x86_64.yml
        run: |
          curl -u eko5624:$GH_TOKEN \
            -X POST -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/eko5624/toolchain/actions/workflows/cross-llvm-clang-x86_64.yml/dispatches \
            -d '{"ref":"main","inputs":{"pgo":"${{ inputs.pgo }}","llvm_thin_lto":"${{ inputs.llvm_thin_lto }}","llvm_full_lto":"${{ inputs.llvm_full_lto }}","llvm_ccache":"${{ inputs.llvm_ccache }}","package_lto":"${{ inputs.package_lto }}","package_ccache":"${{ inputs.package_ccache }}"}}'
  build_llvm-clang-x86_64_v3:
    needs: build_llvm
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Run cross-llvm-clang-x86_64_v3.yml
        run: |
          curl -u eko5624:$GH_TOKEN \
            -X POST -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/eko5624/toolchain/actions/workflows/cross-llvm-clang-x86_64_v3.yml/dispatches \
            -d '{"ref":"main","inputs":{"pgo":"${{ inputs.pgo }}","llvm_thin_lto":"${{ inputs.llvm_thin_lto }}","llvm_full_lto":"${{ inputs.llvm_full_lto }}","llvm_ccache":"${{ inputs.llvm_ccache }}","package_lto":"${{ inputs.package_lto }}","package_ccache":"${{ inputs.package_ccache }}"}}'
